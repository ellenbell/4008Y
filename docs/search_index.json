[["index.html", "Introduction to Data Science - 4008Y Chapter 1 Welcome to the Data Science Workbook 1.1 Data Science learning objectives 1.2 Teaching layout for Data Science 1.3 Assessment 1.4 How to use this workbook 1.5 Why is data science important and why are we teaching it in R?", " Introduction to Data Science - 4008Y Dr Ellen Bell 2022-08-04 Chapter 1 Welcome to the Data Science Workbook 1.1 Data Science learning objectives Introduction to Data Science is a ‘sub-module’ that will run throughout your first year as part of the BIO-4008Y Skills for Biologists module. Here we aim to teach you the fundamentals of how to collect and organise data in a clean and sensible format and how to correctly visualise and describe data. The platform we will be using to manage, manipulate and analyse data is RStudio Cloud. This is a cloud based interface utilises the programming language R. Over the course of the next few weeks you will start to learn fundamentals of this language and its application in RStudio Cloud. 1.2 Teaching layout for Data Science The Data Science sub-module aims to cover fundamentals of data organisation and visualisation in semester 1 and in semester 2 will move onto some slightly more advanced data visualisation skills, descriptive statistics and data interpretation. Towards the end of the module we will briefly touch on inferential statistics, but this will be a very brief introduction. In semester 1 you will have either a lecture or a 1 hour workshop each week; Semester 1 Lectures - Weeks; 2, 3, 6, 7, 9, 10 Semester 1 Workshops - Weeks; 4, 8, 11 And then in semester 2 you will have a lecture every week up to week 8 and a 2 hour workshop every other week; Semester 2 Lectures - Weeks; 1, 2, 3, 4, 5, 6, 7, 8 Semester 2 Workshops - Weeks; 2, 4, 6, 8 In addition to the in person taught material, you will be expected to complete a chapter of this workbook every week. 1.3 Assessment Semester 1 Two quizzes are available on the 4008Y page under Data Science. These are “semi-formative” quizzes, you can attempt them at any point during the semester and you can attempt them as many times as you like. However, if you complete them with a grade of 40% or higher you will get a mark added to your summative Skills essay. If you complete them with a grade of 80% or higher you will get 2 marks added to your summative Skills essay. That’s 4 marks in total, last year this was enough to move several students up to the next grade boundary. Semester 2 As part of your Skills portfolio, there will be a data handling task. For this you will be given some data and asked to correctly visualise it in a clean, clear and attractive way, with a suitable figure legend. 1.4 How to use this workbook Each week of taught material is accompanied by a workbook chapter. You will be expected read through these chapters and complete any exercises in your own time. Each chapter should take no more then an hour to complete and in many cases will take much less time. We will aim to set aside 10 minutes at the end of each lecture to cover any potential problems you may be having, so if you get stuck, use this time to ask for help. 1.5 Why is data science important and why are we teaching it in R? It is a common misconception that to be a good biologist you need to ‘know’ the mechanics of how life works. Questions like; “How does a cell undergo respiration?” “How do kidneys filter blood?” “How do some plants fix nitrogen?” and “How do honey bees communicate the location and quantity of resources to each other?” spring to mind. While these questions are important, they are also, now, fairly well understood. But how did biologists come to their understanding of these mechanisms? The answer to this lies in data. Good science is based on empirical observations and these observations should be reliably collected and reproducible. Exploration of theories through observations and experimentation leads to the collection of data and analysis and interpretation of data feeds into the bedrock of our understanding of the principals of how life works, i.e. the biological sciences. Hopefully you can see why data handling, analysis and interpretation are important. So why are we teaching you how to handle data using R? To many of you the use of programming languages, such as R, will be new. However if you can get into the habit of manipulating and analysing data in R you will be well set on the path to becoming an efficient and effective data analyst. Being confident with data is a key skill in the sciences and will serve you well in many career paths. In addition, knowledge and experience of programming languages such as R are fast becoming key skills in their own right in the science, industry, government and beyond. In terms of the use of R for data handling and analysis, you may notice that the term reproducible reoccurs throughout this workbook. In the same way that your methods of data collection should be conducted and recorded in such a way that they may be reproduced by others, your data manipulation and analysis must also be conducted and recorded so as to be reproducible. Using R within the RStudio Cloud interface (we will come back to this in Chapter 2) makes it easy to record your data manipulation and analysis workflow and, if done well, makes it very easy for others to see and repeat what you have done. So hopefully I have convinced you that data handling, analysis and R are all worthwhile skills to cultivate. We will spend some time in lectures discussing this as well. But for now take a look at Chapter 2. Happy coding! "],["introduction-to-r-and-rstudio-cloud---week-2a.html", "Chapter 2 Introduction to R and RStudio Cloud - Week 2A 2.1 What is R and RStudio Cloud? 2.2 Creating your first RStudio Cloud Project 2.3 Entering commands directly into the consol 2.4 Sending commands down to the console from an R script 2.5 A note on comments", " Chapter 2 Introduction to R and RStudio Cloud - Week 2A You should aim to complete this chapter in Week 2, Semester 1. 2.1 What is R and RStudio Cloud? So hopefully you have read through Chapter 1, where we briefly discussed how we would be using R and the RStudio Cloud interface in this module. But what really is R and what is the difference between R and RStudio Cloud? Essentially R is a programming language that is commonly used in statistical computing, data handling, data visualisation and data analysis. RStudio Cloud is a cloud based interface for a piece of software called RStudio (we wont be using the non cloud based RStudio so wont explore this software further here). RStudio Cloud uses the R programming language but has a nice user friendly interface and is a great tool for learning how to conduct analysis in R. We are using the cloud based version of RStudio because it means that no one has to worry about installing extra software on their own computers and everyone will be working with the same software versions. You will all need to create your own free accounts on RStudio Cloud, but first have a look at the short video below introducing you to the interface. A short video introducing you to RStudio Cloud Now that you’ve watched the video, create your own RStudio Cloud account. 2.2 Creating your first RStudio Cloud Project Once you have created an RStudio Cloud account you should be presented with this window printscreen Under Spaces go to Your Workspace and under Projects create a New Project &gt; New R studio Project. printscreen Lets name this project Testing_R, notice that I have no spaces in my project name, instead I have used an underscore, there are a number of good habits you should try and adopt when project or file naming and not including spaces is one of them, we will go over this in more depth in lectures. You can rename your project by clicking on Untitled Project at the top of the window, and typing in your new project name. printscreen You will see that your new project has three panels with tabs showing the Console, Environment and Files for your project. printscreen 2.3 Entering commands directly into the consol Lets start by playing with some commands in the console. Type or copy and paste the simple calculation (or command) shown below, into the console. Your text should appear next to the &gt; symbol. Press Enter on your keyboard, this will instruct R to run the command. 5 + 9 The two final lines of your output should look like this: &gt; 5 + 9 [1] 14 So… your initial command 5 + 9 is shown after the &gt;, symbol and the resulting output from R is shown after [1]. Don’t worry too much about the syntax of &gt; and [1] here. You can think of &gt; as meaning that R is ready to receive a command and [1] as R telling you that the answer to the first part of your question is here (in this case 14). Try out some other commands… What happens when you input the following? 362 * 12 55 / 5 (40 / 990) * 100 4^2 See if you can work out what 30% of 735 is using the R console 2.4 Sending commands down to the console from an R script I have already mentioned the reproducibility factor as an advantage of using RStudio Cloud. This is because you can record and run all of your commands from an R script within RStudio Cloud. This means that you have a written record of your analysis workflow, what you did to your data at which stage, and you can do all of this without altering the original data files! This is super important because it means that if you revisit your work in a few weeks/months/years you can see exactly what you did AND if someone else needs to rerun any of your analysis or use your workflow on some other data, they can! So lets go about setting up your new script. You currently have three panels in RStudioCloud. If you go to file &gt; New File &gt; R Script a new panel will open. print screen print screen This new panel is essentially a text document where you can write your commands into a script and then send them down to the console when you want to run them. Lets have a play. Copy the below into your new R script. 362 * 12 55 / 5 (40 / 990) * 100 4^2 These are all commands you have run before but now if you save your script file you will have a text based document with your progress saved. It doesn’t make a huge amount of sense to do this now because these are just a random set of calculations and we are just playing with the interface, but you could if you wanted to. Ok, so now we are ready to execute our commands. You can do this with each calculation individually, line by line, or you can run the whole script. To run your script line by line, place your cursor on the line you wish to run and you can either; Click on the run button on the top right of the script panel Press ctrl + Enter (or Command + Enter on mac) Or if you wish to run the entire script you can either; Manually highlight the script and click the run button or press ctrl + Enter (or Command + Enter on mac) Press ctrl + A (or Command + A on mac) and then click the run button or press ctrl + Enter (or Command + Enter on mac) 2.5 A note on comments When you are wrighting a script you can leave notes for yourself. This can be extremely useful if you need reminding on what a particular piece of script is doing. This is a good learning tool while you are still learning how to use R, but its also a good habit to get into for later. If you progress with R you will inevitably start constructing quite intricate scripts, leaving good notes on what each part of the script is doing is very useful for you and for anyone else who may later come to use your script. You can leave notes or comments in scripts if you preceed them with #. If R sees # it will ignore all text on that line that comes after it. For example… #Four squared can be calculated with the following command 4^2 In this case I have reminded myself how to calculate 4 squared, everything after the # will be ignored by R when you try to run the line. Well Done! You have started writing and running simple code. But R is capable of doing so much more than simple calculations. Next week in Chapter 3 we will explore how we can create objects, and use packages and functions. "],["objects-packages-and-functions---week-3a.html", "Chapter 3 Objects, Packages and Functions - Week 3A 3.1 Creating objects 3.2 What are functions and packages? 3.3 Using functions 3.4 Installing packages 3.5 What do I do if I get an error message?", " Chapter 3 Objects, Packages and Functions - Week 3A You should aim to complete this chapter in Week 3, Semester 1 3.1 Creating objects As we saw in Chapter 2, R can be used to perform calculations. However, we can use R to perform tasks that are much more complex. However in order to do this we are going to have to learn about objects. Login to your RStudio Cloud account and go into your Testing_R project. Create a new R script and save it under the name objects. You should see it appear as object.R under the Files tab in the bottom right panel. Copy and run the following command using your script. A &lt;- 50 What you have essentially done here, is told R to create an object called A and to store the number 50 inside it using the syntax &lt;-. After running the command you should see your object A and 50 pop up under Environment and Values in the top right hand panel, so you can see that 50 has been stored in A. Lets create some more objects B &lt;- 6 Now see what happens if you run the following command A * b Oh dear… we have an error… &gt; A * b Error: object &#39;b&#39; not found This is because R has absolutely no flexibility with typos. It is looking for an object called b when there is no object called b existent in your environment. There is an object called B, but to R, B and b are completely different things. Try running this instead. A * B Hopefully you should now have an output that looks like this &gt; A * B [1] 300 This is a very simple example. But lets try to demonstrate why saving values within objects may be useful. Lets say you are interested in looking at the number of students who get freshers flu in Week 1 of teaching. You have a class size of 200 students and 15 of them report that they have contracted freshers flu. Use the following script to calculate the percentage of students with freshers flu. # Create two objects, one for your total class and one for those that have flu # Notice that neither of my object names contain spaces # If you need a space always use an underscore or full stop total_class &lt;- 200 with_flu &lt;- 15 # Calculate the percentage of students with flu in week 1 percentage_with_flu &lt;- (with_flu/total_class)*100 If you look in your Environment in the top right panel you should see the percentage of students with flu calculated and stored under percentage_with_flu. You can use the following command to see it printed in the consol. print(percentage_with_flu) But some students have been late in reporting their symptoms. A week later you hear that 7 more students also had freshers flu in Week 1. If you had been typing into the console and not using objects you would have to type this script out all over again. But you dont need to. You just need to change your entry for with_flu from 15 to 22. Do that now and re-run the script. By editing the 15, R will overwrite the object with_flu to include the new value of 22. If you run the last line of code then the percentage of students with flu will also update. This may seem like a very simple example, and it is, but we are still building up your knowledge of R so you will have to take my word for it that objects will be very helpful to you as we progress :) You will see, as we progress, that objects can contain a range of different types of data. We will cover some of these in lectures, but for now lets leave objects and have a think about packages and functions. 3.2 What are functions and packages? If you have the coding skills it is possible to do pretty much whatever you like with your data in R. However, why reinvent the wheel trying to write your own complex scripts, when a lot of very clever coders have already written lots of functional bits of code, known as functions, for general use. Functions can be thought of as a piece of code that is designed to perform a set task. R comes with lots of functions already built in, but there are also lots of additional functions that are stored in packages. Packages are containers that can hold sets of functions or data and as the course progresses you will use a range of packages that contain useful functions and data. For example the data visualisation package (which you will become very familiar with later on) ggplot2 contains ranges of functions which allow you to define how your plot or graph will look, for example geom_bar is a function within the ggplot2 package that contains the instructions required to build a bar chart. 3.3 Using functions We actually have already had some exposure to functions. You used the pring function earlier when you asked R to print out the value contained within the `percentage_with_flu’ object. But lets have a go at using another function. # First of all we need some data # Notice the syntax, by using c() I have told R to prepare for a list of values # Each value is separated by a comma data &lt;- c(2,4,6,8,10,12,14,16,18,20) # Now I want to know what the total value of data is if I add all the values stored within it together total &lt;- sum(data) In the above piece of code we have created some data, as a list of values, and stored them under the object name data. We have then used the function sum(). We have essentially told R that we wish it to perform the function sum() on everything contained within the object data and store it in another object called total. You can see the value within total in your environment, can you work out how to get R to print the value of total out? If you ever need help working out how to use a function you can use another function help(). Try inputing the code below into your console. help(sum) This should bring up a help file in your bottom right hand panel that describes and explains the use of the function sum(). 3.4 Installing packages The sum function is part of the base R package that comes with any R installation. However there are lots of other useful functions that are held in additional packages. In order to use these functions, you must have the necessary packages installed in your work space. I already mentioned that we would be using a package called ggplot2, lets try installing and loading it in your work space. We only need to install a package once so copy this into your console install.packages(&quot;ggplot2&quot;) Now we can try to make a simple plot using a function from within ggplot2 and an example data set from within the base R package called iris. Copy the following command into your script and run it # First load ggplot and the base R datasets in your workspace library(&quot;ggplot2&quot;) library(&quot;datasets&quot;) # Then call the ggplot function and tell it that the data set you wish to use is calles iris # We then need to tell ggplot how to map our variables # The aes function is an aesthetic tool that allowes us to define variables for the x and y axes # We then use the geom_point function to instruct R to built a scatter plot # A second use of the aes function tells R to color points by species ggplot(data = iris,aes(x = Sepal.Length, y = Sepal.Width)) + geom_point(aes(colour=Species)) Those sharped eyed among you may have noticed that the short script defining our plot goes over two lines, has a + and an indentation on the second line. The + and indentation is essentially allowing you to add more directions in how you would like your graph to be built, linking together multiple functions. As we progress with ggplot2 you will start to build on this and add more modifications to your plots. 3.5 What do I do if I get an error message? Error messages are almost guaranteed when working regularly with R, they are super common, dont panic when you eventually run into one. In fact you may remember that we already ran into one earlier in this chapter, that particular error was caused by a typo. Generally the most common causes of error messages are; A typo (you can reduce risk of this by consistently labeling your objects) A mistake in syntax (missing or un-closed; (), \"\", or missing ,) Missing dependencies (maybe you didnt install or load a package correctly, or maybe if your running a longer script, you are trying to call an object that you havent created yet) This is by no means an exhaustive list but when I run into errors its normally because of one of the above. The trick is don’t panic and read the error message carefully, it often tells you what is wrong. Then look over your script slowly to troubleshoot. And if you are genuinely stuck and the error doesn’t make sense, run it through Google, I can almost guarantee you wont have been the first person to have that error message. Well done everyone. I hope you have enjoyed this weeks session. Next week is our first workshop and we will start to use some of these new found skills in tandem and start to look at using them on some new data. 3.5.1 References Wickham, Hadley, Winston Chang, Lionel Henry, Thomas Lin Pedersen, Kohske Takahashi, Claus Wilke, Kara Woo, Hiroaki Yutani, and Dewey Dunnington. 2021. Ggplot2: Create Elegant Data Visualisations Using the Grammar of Graphics. https://CRAN.R-project.org/package=ggplot2. "],["directories-and-data-frames---week-4a---workshop-1.html", "Chapter 4 Directories and data frames - Week 4A - Workshop 1 4.1 Data Entry 4.2 A note on naming 4.3 Setting up your R workspace 4.4 A note on directories and their structure 4.5 Setting up your script 4.6 Importing data 4.7 Creating tibbles 4.8 Before you leave!", " Chapter 4 Directories and data frames - Week 4A - Workshop 1 This week we don’t have any lectures but we do have an in person workshop. The section to complete this week may be a little more chunky then unusual, complete what you can during the workshop and then finish it off in your own time. Do make use of the demonstrators if any of the exercises so far haven’t made sense. 4.1 Data Entry Go to Blackboard &gt; Skills for Biologists &gt; Data Science &gt; Workshop 1 and download the .jpeg files you find there. List files here These are image files of lab notes taken during the data collection phase of a small research project to investigate parasite load in 2 small populations of the flour beetle Tribolium castaneum. Each beetle has an ID, a measure of wing casing (which is a good proxy for overall size) and a tally for the number of tapeworm cysticercoids dissected out. In terms of data handling and analysis, we need this data to be stored digitally and we need to have it ordered sensibly in a spreadsheet. We covered what to look for in a tidy, well ordered spreadsheet in week 3 lectures. Have a go at entering the data from the .jpeg files into an Excel spreadsheet. When you’re done go to File &gt; Save As…, name your spreadsheet something sensible and make sure you select a sensible place to save it to, where it says File Format: select Comma-separated Values (.csv). 4.2 A note on naming While we are on the subject of naming, I am going to take a moment to go over a few good rules to follow. You have just created names for some variables and for a file. You will also frequently have to name folders/directories and objects while working in R, so naming is something that you are repeatedly going to have to do. It therefore makes sense for you to learn how to do it well. Keep names meaningful - Over the course of your degree you will create a lot of files and directories. You will also frequently be naming data variables and objects. You need to be able to easily recognise what is what so informative names are better then arbitrary names. So girraffe, elephant, hippo are better names then 1, 2 and 3. Make versions obvious - There will be occasions when you want to save new information in a file or object but keep the original untouched. You may be experimenting or you may want the option to revisit to your original work. In these instances it makes sense to save your edits to a new version of the original file or object. If you do this and especially if you are sharing it with others make it clear. I tend to add my initials and a version identifier (e.g. v1, v2) as a suffix to the file name. Keep names short - Typing takes time, its boring, and the more you type the greater the risk of a typo. So keep names short. So trunk_length is better than elephant_trunk_length_cm, there is important information in the second name but you can store this as a comment or a note. Avoid spaces - Lots of software packages hate spaces, including R. If you can get out of the habbit of using spaces and instead use _ your future self will thank you. Abide by the rules for R - R does have some rules of its own for naming. Names must not start with a number, but numbers may be used provided the first character is a letter. You can also use . or _, but avoid spaces at all costs. You may use upper or lower case letters, but remember R is case sensitive so will see Elephant and elephant as different. I try to keep to a lower case and use _ instead of spaces, it keeps everything uniform and saves me time (this style is known as snake_case). Now go back to your spreadsheet, do your variables and file names follow a sensible naming convention? Make sure you have a demonstrator check your work before moving onto the next step. 4.3 Setting up your R workspace This is a new piece of analysis, we will be carrying forward principals from the previous chapters but scripts and data will be new. So its a good idea to start with a fresh clean workspace. So lets set up a new project in RStudio Cloud, follow the steps from Chapter 2 if you cant remember how to do this and name this project tribolium_parasites. Its always good to keep a well organised tidy workspace, generally I will start a new project in RStudio Cloud if I am working on a new series of questions with a new data set or sets. For this project you need to make sure two packages are installed. Copy the following directly into your console. install.packages(&quot;tidyverse&quot;) install.packages(&quot;janitor&quot;) We will be moving towards doing some more comprehensive data handling so setting up your workspace is going to become more and more important. If you can get into the habit of setting up your workspace properly at the start of each project you will thank yourself later. A well developed project will contain several files including; Input data Scripts Outputs Under Files in the bottom right panel create a New Folder, for each of the following; data scripts figures Make sure you copy the names over exactly, or some of the commands that we will be using later wont work A tidy workspace will help you find the things you need when you need them and will reduce the risk of loosing things. 4.4 A note on directories and their structure Working with text based interfaces like R, where you are writing and running commands, means that we need to have some understanding of the underlying computer architecture. You need to have some appreciation for how files are organised within folders/directories and why its important to know which directory you are working from with R. Under Files in the bottom right panel of your screen you will see a file with the ending .Rproj. This is an R project file which tells R where you are working in the server. It means that R will automatically treat your project location as the working directory. If you wish to access files in any of the folders you have just created you will need to tell R the path that it needs to follow in order to access these files. There are two types of path; absolute paths, which refers to the same location in a file system relative to the root directory (don’t worry if that doesn’t make too much sense at this stage). relative. paths which refers to a location in the file system relative to the directory you are currently working in. Here we will only be dealing with relative paths because you will always be working from within your R project directory. So for example if you wish to access a file in your data folder in the R project you would need to provide the path (\"data/any_sub_folders_you_may_have_made/the_file_you_wish_to_access\"). We will do this in the next step so don’t worry if you don’t quite get it yet. 4.5 Setting up your script Right OK, enough theory, lets start setting up your script. Create a new R script and call it tribolium_parasites. Its always good to add a few lines of description at the start of your script, this tells your future self and anyone else what the script is doing. Copy over the following. # An analysis of parasite abundance between male and female tribolium beetles from two thermal treatments (30 and 35 degrees centigrade) # Your name Then we need to load any packages that we might want to use; library(tidyverse) # Loads the tidyverse package library(janitor) # Loads the janitor package 4.6 Importing data Lets import your data set. Go into your data folder, click Upload and select your newly made .csv file. Once its uploaded you should be able to see it under data/ in the bottom right panel. Now we need to tell R to read your .csv file. # Read the data from the .csv file in the data folder into my project tribolium_parasites &lt;- read_csv(&quot;data/your_file_name.csv&quot;) # R should respond with this; &gt; Tribolium &lt;- read_csv(&quot;data/Tribolium_parasites.csv&quot;) Rows: 20 Columns: 3 ── Column specification ─────────────────────────────────────────────────────────── Delimiter: &quot;,&quot; dbl (3): beetle_id, wing_case_size, parasite_burden Here R has told us that there are 20 rows and 3 columns in our data set, it has indicated that it has used comas as a collumn deliminator and that all the data are dbl (short for double), whidch means each collumn contains numbers. You should also be able to see tribolium in your Environment under Data. If you have errors, make sure your file name and path are input correctly. Lets have a look at our data to make sure it looks as we expect it to, try this; head(tribolium_parasites) We can see that R has read from this we can see for ourselves that R has correclty read our data. 4.7 Creating tibbles So we have successfully imported data into R from a .csv file and stored it as a data frame which is a type of two dimensional array. Tibbles are a type of data frame as well, these can be useful if you want to type your data straight into R, or if you have more information to add to a pre-existing data frame. For example, we also have some additional data on the sex and treatment conditions of the Tribolium beetles. So lets create a tibble, add the following to your script; # First of all lets create some variables beetle_id &lt;- c(1:20) # Notice that this notation will create of a list of numbers 1 to 20 sex &lt;- c(&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;F&quot;,&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;M&quot;,&quot;M&quot;) treatment &lt;- c(35,35,35,35,35,35,35,35,35,35,30,30,30,30,30,30,30,30,30,30) Now we neet to turn our new variables into a data frame # Turning variables into a tibble tribolium_extras &lt;- tibble(beetle_id,sex,treatment) Try using head() to check your new `tribolium_extras’ data frame. It may be advantageous to have all the data from both of our data frames together, we can use another function to do this. However first I would like everyone in the class to have the same column headings, this will help us later on but also sometimes its useful to change headings in R. Add the following to your script and run it, make sure you edit it to match your collumn names. # Renaming some column names tribolium &lt;- tribolium %&gt;% rename(beetle_id = your_collumn_name_here) # Check how your data frame now looks head(tribolium) Side note - you may have noticed the %&gt;% expression, this is known as the forward pipe opporator and allows you to chain together commands. This is a very simple use of it but it is piping your data frame forward to the rename function. Hopefully the column containing your beetle IDs is now labeled beetle_id. Use the same set of commands to rename your columns for beetle wing case size and parasite load. Call these columns wing_case_size and parasite_burden instead. Now we can merge our two data frames. # Merge data frames tribolium_combo &lt;- merge(tribolium, tribolium_extras, by = &quot;beetle_id&quot;) # This merge function combines both of your data frames but matches rows by beetle_id Take a look at your new data frame now with the head() function. Lets try one more command to do one last check on your data. Try this; glimpse(tribolium_combo) This command will show you something like this &gt;glimpse(tribolium_combo) Rows: 20 Columns: 5 $ beetle_id &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17… $ wing_case_size &lt;dbl&gt; 2.4, 2.2, 2.5, 2.3, 2.3, 2.6, 2.6, 2.3, 2.4, 2.4, 2.3, 2.… $ parasite_burden &lt;dbl&gt; 15, 15, 19, 13, 12, 19, 22, 10, 14, 16, 11, 8, 15, 9, 14,… $ sex &lt;chr&gt; &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;F&quot;, &quot;F… $ treatment &lt;dbl&gt; 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 30, 30, 30, 30, 3… Once again we can see that four of our variables have been interpreted by R as being &lt;dbl&gt; vectors, R has correctly identified them as being numeric. One of our variables has been identified as being a &lt;chr&gt; (short for character) vector, so R knows that this variable contains letters or words. Well done everyone, you have successfully entered your data and uploaded it to RStudioCloud as well as making some small adjustments to the data frame and doing a first pass quality check! There are more checks we could have run, and we will revisit this later in the course when we look at some larger data sets. But we will leave this here for now, next week is reading week and the week after we will start looking at some initial observations in the data. 4.8 Before you leave! Make sure you save your script! 4.8.1 References Firke, Sam. 2021. Janitor: Simple Tools for Examining and Cleaning Dirty Data. https://github.com/sfirke/janitor. Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686. Wickham, Hadley, Romain François, Lionel Henry, and Kirill Müller. 2021. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr. Wickham, Hadley, Jim Hester, and Jennifer Bryan. 2021. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr. "],["reading-week---week-5a.html", "Chapter 5 Reading week - Week 5A", " Chapter 5 Reading week - Week 5A There will be no new material released this week, we recommend that you use this time to catchup on any former sections of the workbook that you may not have completed yet. "],["exploring-the-dimensions-of-your-data-frame---week-6a.html", "Chapter 6 Exploring the dimensions of your data frame - Week 6A 6.1 Top to tail - some useful functions to explore 6.2 Whats your sample size? 6.3 Before you leave!", " Chapter 6 Exploring the dimensions of your data frame - Week 6A You should aim to complete this chapter in Week 6, Semester 1 6.1 Top to tail - some useful functions to explore Log into RStudio cloud and open up your tribolium_parasites project. Lets start by reminding ourselves of what these data look like. Try using the following functions on yourtribolium_combo data frame, copy them into your script and comment # next to each when you work out what it does. # Some functions to play with nrow() ncol() colnames() str() view() tail() Hopefully you can see that these functions help give you some good insights into the dimensions of your data set, especially whenn used alongside functions that you are already be familiar with, like head() and glimpse(). 6.2 Whats your sample size? With this data set its not hard to work out what the sample size is. But data sets can become huge and its not always easy or effective to scroll through them. Sometimes you really just need to know how many observations are in your data set, thankfully each of our beetles has a unique identifyer so we can count how many unique entries there are in the beetle_id variable. Try the following; # Use the summarise function to count unique/distinct entries in the beetle_id column summarise(n_distinct(tribolium_combo$beetle_id)) Side note - Notice the use of the $ above. This is effectively directling R to a specific column within a data frame. You may have noticed that we have two categorical variables in this data set, sex and treatment. It would be really useful to know what your sample size is for each of these variable. ITry the following; # Use the tabyl function from the janitor package, comment on what it does. tabyl(tribolium_combo, sex , treatment) So hopefully you can see from the summarise and tabyl functions that we have a total sample size of 20 beetles and that 5 of each sex were exposed to each treatment. Next week we will start to explore how we can visualise some of these data. 6.3 Before you leave! Make sure you save your script! 6.3.1 References Firke, Sam. 2021. Janitor: Simple Tools for Examining and Cleaning Dirty Data. https://github.com/sfirke/janitor. Wickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy D’Agostino McGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to the tidyverse.” Journal of Open Source Software 4 (43): 1686. https://doi.org/10.21105/joss.01686. Wickham, Hadley, Romain François, Lionel Henry, and Kirill Müller. 2021. Dplyr: A Grammar of Data Manipulation. https://CRAN.R-project.org/package=dplyr. Wickham, Hadley, Jim Hester, and Jennifer Bryan. 2021. Readr: Read Rectangular Text Data. https://CRAN.R-project.org/package=readr. "],["initial-observations---week-7.html", "Chapter 7 Initial Observations - Week 7 7.1 Getting the measure of your data 7.2 Exploring a little further 7.3 Your first plot in R", " Chapter 7 Initial Observations - Week 7 7.1 Getting the measure of your data 7.2 Exploring a little further 7.3 Your first plot in R "],["lost-the-plot-start-to-visualise-data---week-8---workshop-2.html", "Chapter 8 Lost the plot? Start to visualise data - Week 8 - Workshop 2 8.1 Relationships and differences 8.2 Introduction to ggplot2 8.3 Some different plots", " Chapter 8 Lost the plot? Start to visualise data - Week 8 - Workshop 2 This is our second workshop hopefully you are gaining some confidence with R and working with data. 8.1 Relationships and differences 8.2 Introduction to ggplot2 8.3 Some different plots "],["make-them-pretty---week-9.html", "Chapter 9 Make them pretty - Week 9", " Chapter 9 Make them pretty - Week 9 "],["make-them-pretty-continued---week-10.html", "Chapter 10 Make them pretty continued - Week 10", " Chapter 10 Make them pretty continued - Week 10 "],["writing-a-script-from-scratch---week-11---workshop-3.html", "Chapter 11 Writing a script from “scratch” - Week 11 - Workshop 3", " Chapter 11 Writing a script from “scratch” - Week 11 - Workshop 3 "],["recapping-semester-1---week-1b.html", "Chapter 12 Recapping Semester 1 - Week 1B", " Chapter 12 Recapping Semester 1 - Week 1B "],["references-3.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
